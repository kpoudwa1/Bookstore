--###############################################################
--								DDL
--###############################################################
--===============================================================
--								Book tables
--===============================================================

--Books
CREATE TABLE BOOKSTORE.BOOK (
    ID INT AUTO_INCREMENT PRIMARY KEY,
    TITLE VARCHAR(50),
    CATEGORY_ID INT REFERENCES BOOK_CATEGORY,
    IMAGE BLOB,
    SUMMARY VARCHAR(3000)
);

--Book_Format
CREATE TABLE BOOKSTORE.BOOK_FORMAT (
    ID INT REFERENCES BOOK,
    ISBN_10 VARCHAR(20),
    ISBN_13 VARCHAR(20),
    FORMAT VARCHAR(10) CHECK (FORMAT IN ('PAPERBACK' , 'HARDCOVER')),
    PRICE FLOAT(5 , 2 ),
    NUM_COPIES INT
);

--Book_Category
CREATE TABLE BOOKSTORE.BOOK_CATEGORY (
	ID INT PRIMARY KEY,
    CATEGORY_NAME VARCHAR(30) NOT NULL
);

--Author
CREATE TABLE BOOKSTORE.AUTHOR (
	ID INT PRIMARY KEY,
    AUTHOR_NAME VARCHAR(30) NOT NULL
);

--Book_Author
CREATE TABLE BOOKSTORE.BOOK_AUTHOR (
	BOOK_ID INT NOT NULL REFERENCES BOOK,
	AUTHOR_ID INT NOT NULL REFERENCES AUTHOR
);

--===============================================================
--								User tables
--===============================================================

--User
CREATE TABLE BOOKSTORE.USER (
    ID INT AUTO_INCREMENT PRIMARY KEY,
    FIRST_NAME VARCHAR(50),
    LAST_NAME VARCHAR(50),
	DOB DATE,
	GENDER VARCHAR(1),
    EMAIL VARCHAR(50),
	PASSWORD VARCHAR(500),
	ADDRESS_LINE1 VARCHAR(50),
	ADDRESS_LINE2 VARCHAR(50),
	CITY VARCHAR(50),
	STATE VARCHAR(50),
	PINCODE VARCHAR(10)
);

--Order_Status
CREATE TABLE BOOKSTORE.ORDER_STATUS (
	ID INT PRIMARY KEY,
    STATUS_NAME VARCHAR(30) NOT NULL,
	DISPLAY_NAME VARCHAR(30) NOT NULL
);

--Purchases
CREATE TABLE BOOKSTORE.PURCHASES (
    ID INT AUTO_INCREMENT PRIMARY KEY,
	USER_ID INT REFERENCES USER,
	BOOK_ID INT REFERENCES BOOK,
	QUANTITY INT,
	ORDER_DATE DATE,
	STATUS INT REFERENCES ORDER_STATUS
);

--Track_Order
CREATE TABLE BOOKSTORE.TRACK_ORDER (
    ID INT AUTO_INCREMENT PRIMARY KEY,
	USER_ID INT REFERENCES USER,
	BOOK_ID INT REFERENCES BOOK,
	QUANTITY INT,
	STATUS INT REFERENCES ORDER_STATUS,
	STATUS_DATE DATE
);

--###############################################################
--Trigger
--###############################################################
CREATE DEFINER=`root`@`localhost` TRIGGER `PURCHASE_INSERT_OR_UPDATE` AFTER INSERT ON `track_order` FOR EACH ROW BEGIN
IF NEW.STATUS = 1 THEN
	INSERT INTO BOOKSTORE.PURCHASES (USER_ID, BOOK_ID, QUANTITY, ORDER_DATE, STATUS) VALUES (NEW.USER_ID, NEW.BOOK_ID, NEW.QUANTITY, NEW.STATUS_DATE, NEW.STATUS);
    UPDATE BOOKSTORE.BOOK_FORMAT SET NUM_COPIES = CASE
		WHEN NUM_COPIES = 0 THEN 0
		ELSE NUM_COPIES - NEW.QUANTITY
		END
	WHERE ID = NEW.BOOK_ID;
ELSEIF NEW.STATUS = 5 THEN 
	UPDATE BOOKSTORE.PURCHASES SET STATUS = NEW.STATUS WHERE USER_ID = NEW.USER_ID AND BOOK_ID = NEW.BOOK_ID;
END IF;    
END